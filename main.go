package main

import (
	"flag"
	"log"
	"net"
	"net/http"
	"os"
	"tls-test/tls"
)

// Test certificate copied from the Go tls test cases.

var _defaultCertPem = []byte(`-----BEGIN CERTIFICATE-----
MIIBhTCCASugAwIBAgIQIRi6zePL6mKjOipn+dNuaTAKBggqhkjOPQQDAjASMRAw
DgYDVQQKEwdBY21lIENvMB4XDTE3MTAyMDE5NDMwNloXDTE4MTAyMDE5NDMwNlow
EjEQMA4GA1UEChMHQWNtZSBDbzBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IABD0d
7VNhbWvZLWPuj/RtHFjvtJBEwOkhbN/BnnE8rnZR8+sbwnc/KhCk3FhnpHZnQz7B
5aETbbIgmuvewdjvSBSjYzBhMA4GA1UdDwEB/wQEAwICpDATBgNVHSUEDDAKBggr
BgEFBQcDATAPBgNVHRMBAf8EBTADAQH/MCkGA1UdEQQiMCCCDmxvY2FsaG9zdDo1
NDUzgg4xMjcuMC4wLjE6NTQ1MzAKBggqhkjOPQQDAgNIADBFAiEA2zpJEPQyz6/l
Wf86aX6PepsntZv2GYlA5UpabfT2EZICICpJ5h/iI+i341gBmLiAFQOyTDT+/wQc
6MF9+Yw1Yy0t
-----END CERTIFICATE-----`)

var defaultCertPem = []byte(`-----BEGIN CERTIFICATE-----
MIIFfTCCA2UCFGQyiyHhiyFMBSWV/voDUUWefYR+MA0GCSqGSIb3DQEBCwUAMHsx
CzAJBgNVBAYTAlhYMRIwEAYDVQQIDAlTdGF0ZU5hbWUxETAPBgNVBAcMCENpdHlO
YW1lMRQwEgYDVQQKDAtDb21wYW55TmFtZTEbMBkGA1UECwwSQ29tcGFueVNlY3Rp
b25OYW1lMRIwEAYDVQQDDAlsb2NhbGhvc3QwHhcNMjQwMzAxMTIwNzU4WhcNMzQw
MjI3MTIwNzU4WjB7MQswCQYDVQQGEwJYWDESMBAGA1UECAwJU3RhdGVOYW1lMREw
DwYDVQQHDAhDaXR5TmFtZTEUMBIGA1UECgwLQ29tcGFueU5hbWUxGzAZBgNVBAsM
EkNvbXBhbnlTZWN0aW9uTmFtZTESMBAGA1UEAwwJbG9jYWxob3N0MIICIjANBgkq
hkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAuJmNAt3Q38Yw1f8VsBg0yVYNNQT0lwHo
f/kcHzWL8P8rWZT6+wVtF/JHq3Cq3zukCX8pGv99D6jG2vxxwCV/DwRjIPEjfLq2
2qIn21zJ1KGReRD1iWiMIQhslPgznodL56djKuGxsEETKqyXhPLCzcZtjEpJ69Nz
vxO2g9aV444J6ALc2kBsFMoi4QgKWXo/D3FntNzzdOdmM6Atgj0G0oMqPMbQFMwv
P6R73fqV8202luywLi7oIYCj7lCcUcPpi+sPVQqhvIrQcDis+fHuWOokIOdVGGQ2
uAEQY5ut7gnZPOmxw2Fo/L8e8yvsJo+UVPXGUmBt8755knn8cZAFbAAqO4pOfL7o
42BD6uX4kaSMuk1/3gra/m9M1J2kt0nolPo9W9zBIKJzfLCG6qpo9b5qFsyniT0R
2L7YjPuHEytuj2iVJXSpbuhk0mM57eSU+4i40K9jDn/leOuUSzcfUFAK/KMqa4I3
tUAWCPx6tuev8/agz/kxRroQhzQkcSWPxjAd/0V3B927cv0y45rz9ixzeGo26272
e5g8hSbSQpHV5Wy4yy0Th7a+i8whGfCsl50vIXnGR/nFDIudd789D1367EOXjz5/
TcrI/iFtWlY32+e4+g265aU5vz7cfQCUsUE4IaxXbXJVBd8T3HCQUYkEdCPhL8+S
0MPtP8af9rcCAwEAATANBgkqhkiG9w0BAQsFAAOCAgEAWGL5GBUcTqg2dABnHVtQ
j0jzl09TpHUO+6cNpPCR0Fz64pMYv+OlFj7kpSgIZ50y8t/jyg/ScVzOPuL4Xcy4
OBXriQ8lZTdrH5SZy+8Ee4l6/rAyrWU6sSZxsjzqCOc6AWaepmsS1GrDOLjiex05
wX4gB1b7R6099WDW/0efFG0YddRYCQQZN/dePdIAqCqbnLuKSE+feNddclJi/dys
2Zo0w8EoYJjemXnbDeML783P3G5pTAmDkpy2yuEu7PBkAeFpbb6aoSv96p7iMyLW
mMGiqmmjKGoZTi9zoGF7MU6gML66UQ4z8xzv5BQnXj2NOuZdRnlURHUEE5hcif1w
1dpKkNdN9atb8nncnBRQUX84nMLA+epxMFH7dmqHSImrk2gCsgTr0I/rRG7quFXW
P1sBm9A8f26i6KOP49e+gJ2KkAEyJj0RZZav+DvrGx3wSiEukcYIt/CIsy+Nta3H
opvj9m5M2Wm0OnlpJl4QLs3Y1ZWhO+LymQi7SR/6TYWFiT3rPoYUNdPVSvpbE7UZ
L5Duxoz6XZBgWXaw9b3Vlw6mLZZ5HzAFOxMgg6qckeVxYF7z3CKVh3l0wT0pQtt9
gnLLhPwWFc2gEi5wLSp3y4w/x+zVCTMJ5jjfnCjYdS+1o42VF8L/teHIMYC5no4s
2Cl/Emf5e4JMB+f9KrGaqY8=
-----END CERTIFICATE-----`)

var _defaultKeyPem = []byte(`-----BEGIN EC PRIVATE KEY-----
MHcCAQEEIIrYSSNQFaA2Hwf1duRSxKtLYX5CB04fSeQ6tF1aY/PuoAoGCCqGSM49
AwEHoUQDQgAEPR3tU2Fta9ktY+6P9G0cWO+0kETA6SFs38GecTyudlHz6xvCdz8q
EKTcWGekdmdDPsHloRNtsiCa697B2O9IFA==
-----END EC PRIVATE KEY-----`)

var defaultKeyPem = []byte(`-----BEGIN EC PRIVATE KEY-----
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
cGfS/zQEPUKd9xci4G/mnuOygAuMgdw=
-----END EC PRIVATE KEY-----`)


func main() {
	var err error

	listenAddr := flag.String("listenAddr", ":3333", "Address to listen on.")
	certFile := flag.String("certFile", "", "PEM-encoded X509 certificate file to use.")
	keyFile := flag.String("keyFile", "", "PEM-encoded X509 key file to use.")
	flag.Parse()

	certPem := defaultCertPem
	keyPem := defaultKeyPem

	// Read key-pair files, if specified.
	if *certFile != "" {
		certPem, err = os.ReadFile(*certFile)
		if err != nil {
			log.Fatalf("Error reading certificate file %q: %v", *certFile, err)
		}
	}
	if *keyFile != "" {
		keyPem, err = os.ReadFile(*keyFile)
		if err != nil {
			log.Fatalf("Error reading key file %q: %v", *keyFile, err)
		}
	}

	// Parse keypair.
	cert, err := tls.X509KeyPair(certPem, keyPem)
	if err != nil {
		log.Fatalf("Error parsing PEM-encoded X509 key pair: %v", err)
	}

	// Set up TLS configuration. Disable TLS 1.3.
	cfg := &tls.Config{
		Certificates: []tls.Certificate{cert},
		MaxVersion:   tls.VersionTLS12,
	}

	l, err := net.Listen("tcp", *listenAddr)
	if err != nil {
		log.Fatalf("Error listening on TCP port: %v", err)
	}
	tlsl := tls.NewListener(l, cfg)

	log.Printf("Listening on %s", *listenAddr)
	err = http.Serve(tlsl, http.NotFoundHandler())
	if err != nil {
		log.Fatalf("Error in http.Serve: %v", err)
	}
}
