package main

import (
	"flag"
	"log"
	"net"
	"net/http"
	"os"
	"tls-test/tls"
	"io/ioutil"
)


func main() {
	var err error

	// Test certificate created as in README instructions

	certPath := "./node-openssl/golang-tls.pem"
	defaultCertPem, err := ioutil.ReadFile(certPath)
	if err != nil {
	log.Fatalf("Error reading file: %v", err)
	}

	keyPath := "./node-openssl/go-key.pem"
	defaultKeyPem, err := ioutil.ReadFile(keyPath)
	if err != nil {
	log.Fatalf("Error reading file: %v", err)
	}

	listenAddr := flag.String("listenAddr", ":3333", "Address to listen on.")
	certFile := flag.String("certFile", "", "PEM-encoded X509 certificate file to use.")
	keyFile := flag.String("keyFile", "", "PEM-encoded X509 key file to use.")
	flag.Parse()

	certPem := defaultCertPem
	keyPem := defaultKeyPem

	// Read key-pair files, if specified.
	if *certFile != "" {
		certPem, err = os.ReadFile(*certFile)
		if err != nil {
			log.Fatalf("Error reading certificate file %q: %v", *certFile, err)
		}
	}
	if *keyFile != "" {
		keyPem, err = os.ReadFile(*keyFile)
		if err != nil {
			log.Fatalf("Error reading key file %q: %v", *keyFile, err)
		}
	}

	// Parse keypair.
	cert, err := tls.X509KeyPair(certPem, keyPem)
	if err != nil {
		log.Fatalf("Error parsing PEM-encoded X509 key pair: %v", err)
	}

	// Set up TLS configuration. Disable TLS 1.3.
	cfg := &tls.Config{
		Certificates: []tls.Certificate{cert},
		MaxVersion:   tls.VersionTLS12,
	}

	l, err := net.Listen("tcp", *listenAddr)
	if err != nil {
		log.Fatalf("Error listening on TCP port: %v", err)
	}
	tlsl := tls.NewListener(l, cfg)

	log.Printf("Listening on %s", *listenAddr)
	err = http.Serve(tlsl, http.NotFoundHandler())
	if err != nil {
		log.Fatalf("Error in http.Serve: %v", err)
	}
}
